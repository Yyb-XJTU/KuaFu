// Generated by gencpp from file V2X_pkg/V2X.msg
// DO NOT EDIT!


#ifndef V2X_PKG_MESSAGE_V2X_H
#define V2X_PKG_MESSAGE_V2X_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace V2X_pkg
{
template <class ContainerAllocator>
struct V2X_
{
  typedef V2X_<ContainerAllocator> Type;

  V2X_()
    : Yellow()
    , Red()
    , Black()  {
    }
  V2X_(const ContainerAllocator& _alloc)
    : Yellow(_alloc)
    , Red(_alloc)
    , Black(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Yellow_type;
  _Yellow_type Yellow;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Red_type;
  _Red_type Red;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Black_type;
  _Black_type Black;





  typedef boost::shared_ptr< ::V2X_pkg::V2X_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::V2X_pkg::V2X_<ContainerAllocator> const> ConstPtr;

}; // struct V2X_

typedef ::V2X_pkg::V2X_<std::allocator<void> > V2X;

typedef boost::shared_ptr< ::V2X_pkg::V2X > V2XPtr;
typedef boost::shared_ptr< ::V2X_pkg::V2X const> V2XConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::V2X_pkg::V2X_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::V2X_pkg::V2X_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::V2X_pkg::V2X_<ContainerAllocator1> & lhs, const ::V2X_pkg::V2X_<ContainerAllocator2> & rhs)
{
  return lhs.Yellow == rhs.Yellow &&
    lhs.Red == rhs.Red &&
    lhs.Black == rhs.Black;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::V2X_pkg::V2X_<ContainerAllocator1> & lhs, const ::V2X_pkg::V2X_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace V2X_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::V2X_pkg::V2X_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_pkg::V2X_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::V2X_pkg::V2X_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::V2X_pkg::V2X_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_pkg::V2X_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_pkg::V2X_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::V2X_pkg::V2X_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7304ed0a871552fc04b10784eeafcb6";
  }

  static const char* value(const ::V2X_pkg::V2X_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7304ed0a871552fULL;
  static const uint64_t static_value2 = 0xc04b10784eeafcb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::V2X_pkg::V2X_<ContainerAllocator> >
{
  static const char* value()
  {
    return "V2X_pkg/V2X";
  }

  static const char* value(const ::V2X_pkg::V2X_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::V2X_pkg::V2X_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] Yellow\n"
"int32[] Red\n"
"int32[] Black\n"
;
  }

  static const char* value(const ::V2X_pkg::V2X_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::V2X_pkg::V2X_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Yellow);
      stream.next(m.Red);
      stream.next(m.Black);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2X_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::V2X_pkg::V2X_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::V2X_pkg::V2X_<ContainerAllocator>& v)
  {
    s << indent << "Yellow[]" << std::endl;
    for (size_t i = 0; i < v.Yellow.size(); ++i)
    {
      s << indent << "  Yellow[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Yellow[i]);
    }
    s << indent << "Red[]" << std::endl;
    for (size_t i = 0; i < v.Red.size(); ++i)
    {
      s << indent << "  Red[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Red[i]);
    }
    s << indent << "Black[]" << std::endl;
    for (size_t i = 0; i < v.Black.size(); ++i)
    {
      s << indent << "  Black[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Black[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_PKG_MESSAGE_V2X_H
